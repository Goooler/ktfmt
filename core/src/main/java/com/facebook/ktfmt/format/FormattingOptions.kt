/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.ktfmt.format

import com.facebook.ktfmt.format.TrailingCommaManagementStrategy.COMPLETE
import com.facebook.ktfmt.format.TrailingCommaManagementStrategy.NONE

data class FormattingOptions(
    /** ktfmt breaks lines longer than maxWidth. */
    val maxWidth: Int = DEFAULT_MAX_WIDTH,

    /**
     * blockIndent is the size of the indent used when a new block is opened, in spaces.
     *
     * For example,
     * ```
     * fun f() {
     *   //
     * }
     * ```
     */
    val blockIndent: Int,

    /**
     * continuationIndent is the size of the indent used when a line is broken because it's too
     * long, in spaces.
     *
     * For example,
     * ```
     * val foo = bar(
     *     1)
     * ```
     */
    val continuationIndent: Int,

    /**
     * Strategy for managing trailing commas.
     *
     * See [TrailingCommaManagementStrategy] for more details.
     */
    val trailingCommaManagementStrategy: TrailingCommaManagementStrategy = COMPLETE,

    /** Whether ktfmt should remove imports that are not used. */
    val removeUnusedImports: Boolean = true,

    /**
     * Print the Ops generated by KotlinInputAstVisitor to help reason about formatting (i.e.,
     * newline) decisions
     */
    val debuggingPrintOpsAfterFormatting: Boolean = false,
) {
  companion object {
    const val DEFAULT_MAX_WIDTH: Int = 100
  }

  @Deprecated("Here just for retrocompatibility reasons. Will be removed on 1.0.0")
  constructor(
      maxWidth: Int,
      blockIndent: Int,
      continuationIndent: Int,
      manageTrailingCommas: Boolean = true,
      removeUnusedImports: Boolean = true,
      debuggingPrintOpsAfterFormatting: Boolean = false,
  ) : this(
      maxWidth = maxWidth,
      blockIndent = blockIndent,
      continuationIndent = continuationIndent,
      trailingCommaManagementStrategy = if (manageTrailingCommas) COMPLETE else NONE,
      removeUnusedImports = removeUnusedImports,
      debuggingPrintOpsAfterFormatting = debuggingPrintOpsAfterFormatting,
  )

  internal val manageTrailingCommas: Boolean
    get() = trailingCommaManagementStrategy != NONE
}

enum class TrailingCommaManagementStrategy(
    val removeRedundantTrailingCommas: Boolean,
) {
  /** Do not manage trailing commas at all, only format what is already present */
  NONE(removeRedundantTrailingCommas = false),

  /**
   * Only add trailing commas when necessary, but do not remove them.
   *
   * Lists that cannot fit on one line will have trailing commas inserted. Trailing commas can to be
   * used to "hint" ktfmt that the list should be broken to multiple lines.
   */
  ONLY_ADD(removeRedundantTrailingCommas = false),

  /**
   * Fully manage trailing commas, adding and removing them where necessary.
   *
   * Lists that cannot fit on one line will have trailing commas inserted. Lists that span multiple
   * lines will have them removed. Manually inserted trailing commas cannot be used as a hint to
   * force breaking lists to multiple lines.
   */
  COMPLETE(removeRedundantTrailingCommas = true),
  ;

  override fun toString(): String {
    // NONE -> "None"
    // ONLY_ADD -> "Only add"
    // COMPLETE -> "Complete"
    return name.replace("_", " ").lowercase().replaceFirstChar {
      if (it.isLowerCase()) it.titlecase() else it.toString()
    }
  }
}
